*&---------------------------------------------------------------------*
*&  Include           ZEDR10_GR_PAI
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  CASE OK_CODE.
    WHEN 'STORE'.
      PERFORM STORE.

   ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_command_0100 INPUT.

  CASE OK_CODE.
    WHEN 'BACK' OR 'CANC'.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      LEAVE PROGRAM.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.
  CASE OK_CODE.
    WHEN 'DELETE'.  " ## ##

      DATA : LV_ANSWER TYPE C LENGTH 1.
      CLEAR : LV_ANSWER.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
         TITLEBAR                    = '## ##'
          text_question               = '### ## ######?'
         TEXT_BUTTON_1               = '#'
*         ICON_BUTTON_1               = ' '
         TEXT_BUTTON_2               = '###'
         DISPLAY_CANCEL_BUTTON = ''

       IMPORTING
         ANSWER                      = LV_ANSWER.

      IF LV_ANSWER EQ 1.

*        GV_FINUM = 1.

        DATA : LV_BELNR TYPE N LENGTH 10.
        CLEAR : LV_BELNR.

         "  BELNR ####  ####.
        CALL FUNCTION 'NUMBER_GET_NEXT'
          EXPORTING
            nr_range_nr = '01'
            object      = 'ZNR10_2'
          IMPORTING
            number      = LV_BELNR.

        CALL METHOD GC_GRID_0200->CHECK_CHANGED_DATA.
        LOOP AT GT_PO INTO GS_PO.

         IF GS_PO-L_CHECK = 'X'.

        " ZMSEG10 ## ##### ### ## ##.
           DELETE FROM ZMSEG10
             WHERE MBLNR = GS_PO-MBLNR AND
                   EBELN = GS_PO-EBELN AND
                   ZEILE = GS_PO-EBELP.

        " ZBSEG10 ### ## # ## ##.
        CLEAR : GS_ZBKPF10, GS_ZBSEG10.
        MOVE-CORRESPONDING GS_PO TO GS_ZBKPF10.
        MOVE-CORRESPONDING GS_PO TO GS_ZBSEG10.
        GS_ZBKPF10-MANDT = SY-MANDT.
        GS_ZBKPF10-BELNR = LV_BELNR.
        GS_ZBKPF10-BLART = 'WE'.
        GS_ZBKPF10-BLDAT = GS_PO-BEDAT.
        GS_ZBKPF10-BUDAT = GS_PO-BEDAT.
        APPEND GS_ZBKPF10 TO GT_ZBKPF10.


        GS_ZBSEG10-MANDT = SY-MANDT.
        GS_ZBSEG10-BELNR = LV_BELNR.
*        GS_ZBSEG10-BUZEI = GV_FINUM.
*        GV_FINUM = GV_FINUM + 1.
        GS_ZBSEG10-BUZEI = GS_PO-EBELP.
        GS_ZBSEG10-BSCHL = '96'.
        GS_ZBSEG10-SHKZG = 'H'.
        GS_ZBSEG10-HKONT = '11051010'.
        GS_ZBSEG10-DMBTR = -1 * GS_PO-DMBTR.
        GS_ZBSEG10-PSWSL = GS_PO-WAERS.
        APPEND GS_ZBSEG10 TO GT_ZBSEG10.



          DATA: lv_menge TYPE zekpo10-REMAIN_menge.

          " ## ## #### ## ## ##
          SELECT SINGLE REMAIN_menge INTO lv_menge
            FROM zekpo10
            WHERE ebeln = gs_po-ebeln
              AND ebelp = gs_po-ebelp
              AND werks = gs_po-werks.

           "## ## ##
          lv_menge = lv_menge + gs_po-menge.

          " ## ##
          UPDATE zekpo10
            SET REMAIN_menge = lv_menge
            WHERE ebeln = gs_po-ebeln
              AND ebelp = gs_po-ebelp
              AND werks = gs_po-werks.


        " ALV## #### ##.
*         DELETE GT_PO INDEX SY-TABIX.

        " # ###### ZMKPF10 ## ## ## ### ##.

        SELECT SINGLE * FROM ZMSEG10
          WHERE MBLNR = GS_PO-MBLNR.


        IF SY-SUBRC <> 0.
          DELETE FROM ZMKPF10
            WHERE MBLNR = GS_PO-MBLNR.
        ENDIF.

        ENDIF.

        ENDLOOP.

        DELETE GT_PO WHERE L_CHECK = 'X'.


        INSERT ZBKPF10 FROM TABLE GT_ZBKPF10 ACCEPTING DUPLICATE KEYS.
        INSERT ZBSEG10 FROM TABLE GT_ZBSEG10 ACCEPTING DUPLICATE KEYS.
*        IF sy-subrc <> 0.
*          MESSAGE 'ZBSEG10 ## ##!' TYPE 'E'.
*        ENDIF.

        PERFORM REFRESH USING GC_GRID_0200.

     ELSE.

     ENDIF.

    WHEN 'SHOW'.  " ## ##.
      PERFORM GET_DATA_FI.

      IF GT_FI[] IS NOT INITIAL.
        PERFORM MODIFY_FI.
        CALL SCREEN 300.
      ELSE.
        MESSAGE |## #### ####.| TYPE 'I'.
      ENDIF.

  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_command_0200 INPUT.

  CASE OK_CODE.
    WHEN 'BACK' OR 'CANC'.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      LEAVE PROGRAM.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_command_0300 INPUT.

  CASE OK_CODE.
    WHEN 'BACK' OR 'CANC'.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      LEAVE PROGRAM.
  ENDCASE.

ENDMODULE.
